/*** This file is generated by makeTick.py, do not edit ***/

#include "tsTick.h"
#include <babel/StrBuf.h>

int tsTickFactory::serializedTailSize(const tsTick& tick)
{
    switch(tick.mType)
    {
    case tsTickType_Diag: return tsTickDiag::tailSize;
    case tsTickType_Auth: return tsTickAuth::tailSize;
$factoryTailSize
    default: return 0;
    }
}

void tsTickFactory::serializeTail(const tsTick* pTick, char* pBuf)
{
    switch(pTick->mType)
    {
    case tsTickType_Diag: static_cast<const tsTickDiag*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Auth: static_cast<const tsTickAuth*>(pTick)->serializeTail(pBuf); break;
$factorySerializeTail
    }
}

void tsTickFactory::unserializeTail(const char* pBuf, tsTick* pTick)
{
    switch(pTick->mType)
    {
    case tsTickType_Diag: static_cast<tsTickDiag*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Auth: static_cast<tsTickAuth*>(pTick)->unserializeTail(pBuf); break;
$factoryUnserializeTail
    }
}

std::string tsTickFactory::strTail(const tsTick* pTick)
{
    switch(pTick->mType)
    {
    case tsTickType_Diag: return static_cast<const tsTickDiag*>(pTick)->strTail();
    case tsTickType_Auth: return static_cast<const tsTickAuth*>(pTick)->strTail();
$factoryStrTail
    default: return std::string();
    }
}

int tsTickFactory::serialize(const tsTick& tick, char* pBuf)
{
    int tailSize = serializedTailSize(tick);
    pBuf += tick.serializeHead(pBuf, tailSize);
    serializeTail(&tick, pBuf);
    return tailSize + tsTick::SERIALIZEDHEADSIZE;
}

int tsTickFactory::unserialize(const char* pBuf, tsTick* pTick)
{
    int tickSize = bbLDA16LE(pBuf+2);

    if (pTick)
    {
        pBuf += pTick->unserializeHead(pBuf);
        unserializeTail(pBuf, pTick);
    }

    return tickSize;
}

std::string tsTickFactory::str(const tsTick& tick)
{
    return tick.str() + strTail(&tick);
}

$tickClassImpl
