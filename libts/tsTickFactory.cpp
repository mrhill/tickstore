/*** This file is generated by makeTick.py, do not edit ***/

#include "tsTick.h"
#include <babel/StrBuf.h>

int tsTickFactory::serializedTailSize(const tsTick& tick)
{
    switch(tick.mType)
    {
    case tsTickType_Diag: return tsTickDiag::tailSize;
    case tsTickType_Auth: return tsTickAuth::tailSize;
    case tsTickType_AuthReply: return tsTickAuthReply::tailSize;
    case tsTickType_Subscribe: return tsTickSubscribe::tailSize;
    case tsTickType_Price: return tsTickPrice::tailSize;
    case tsTickType_Volume: return tsTickVolume::tailSize;
    case tsTickType_PriceVolume: return tsTickPriceVolume::tailSize;
    case tsTickType_Bid: return tsTickBid::tailSize;
    case tsTickType_Ask: return tsTickAsk::tailSize;
    case tsTickType_BidAsk: return tsTickBidAsk::tailSize;
    case tsTickType_Recap: return tsTickRecap::tailSize;
    case tsTickType_S32: return tsTickS32::tailSize;
    case tsTickType_F64: return tsTickF64::tailSize;

    default: return 0;
    }
}

void tsTickFactory::serializeTail(const tsTick* pTick, char* pBuf)
{
    switch(pTick->mType)
    {
    case tsTickType_Diag: static_cast<const tsTickDiag*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Auth: static_cast<const tsTickAuth*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_AuthReply: static_cast<const tsTickAuthReply*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Subscribe: static_cast<const tsTickSubscribe*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Price: static_cast<const tsTickPrice*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Volume: static_cast<const tsTickVolume*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_PriceVolume: static_cast<const tsTickPriceVolume*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Bid: static_cast<const tsTickBid*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Ask: static_cast<const tsTickAsk*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_BidAsk: static_cast<const tsTickBidAsk*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_Recap: static_cast<const tsTickRecap*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_S32: static_cast<const tsTickS32*>(pTick)->serializeTail(pBuf); break;
    case tsTickType_F64: static_cast<const tsTickF64*>(pTick)->serializeTail(pBuf); break;

    }
}

void tsTickFactory::unserializeTail(const char* pBuf, tsTick* pTick)
{
    switch(pTick->mType)
    {
    case tsTickType_Diag: static_cast<tsTickDiag*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Auth: static_cast<tsTickAuth*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_AuthReply: static_cast<tsTickAuthReply*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Subscribe: static_cast<tsTickSubscribe*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Price: static_cast<tsTickPrice*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Volume: static_cast<tsTickVolume*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_PriceVolume: static_cast<tsTickPriceVolume*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Bid: static_cast<tsTickBid*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Ask: static_cast<tsTickAsk*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_BidAsk: static_cast<tsTickBidAsk*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_Recap: static_cast<tsTickRecap*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_S32: static_cast<tsTickS32*>(pTick)->unserializeTail(pBuf); break;
    case tsTickType_F64: static_cast<tsTickF64*>(pTick)->unserializeTail(pBuf); break;

    }
}

std::string tsTickFactory::strTail(const tsTick* pTick)
{
    switch(pTick->mType)
    {
    case tsTickType_Diag: return static_cast<const tsTickDiag*>(pTick)->strTail();
    case tsTickType_Auth: return static_cast<const tsTickAuth*>(pTick)->strTail();
    case tsTickType_AuthReply: return static_cast<const tsTickAuthReply*>(pTick)->strTail();
    case tsTickType_Subscribe: return static_cast<const tsTickSubscribe*>(pTick)->strTail();
    case tsTickType_Price: return static_cast<const tsTickPrice*>(pTick)->strTail();
    case tsTickType_Volume: return static_cast<const tsTickVolume*>(pTick)->strTail();
    case tsTickType_PriceVolume: return static_cast<const tsTickPriceVolume*>(pTick)->strTail();
    case tsTickType_Bid: return static_cast<const tsTickBid*>(pTick)->strTail();
    case tsTickType_Ask: return static_cast<const tsTickAsk*>(pTick)->strTail();
    case tsTickType_BidAsk: return static_cast<const tsTickBidAsk*>(pTick)->strTail();
    case tsTickType_Recap: return static_cast<const tsTickRecap*>(pTick)->strTail();
    case tsTickType_S32: return static_cast<const tsTickS32*>(pTick)->strTail();
    case tsTickType_F64: return static_cast<const tsTickF64*>(pTick)->strTail();

    default: return std::string();
    }
}

void tsTickFactory::serialize(const tsTick& tick, char* pBuf)
{
    pBuf += tick.serializeHead(pBuf, serializedTailSize(tick));
    serializeTail(&tick, pBuf);
}

int tsTickFactory::unserialize(const char* pBuf, tsTick* pTick)
{
    int tickSize = bbLDA16LE(pBuf+2);

    if (pTick)
    {
        pBuf += pTick->unserializeHead(pBuf);
        unserializeTail(pBuf, pTick);
    }

    return tickSize;
}

std::string tsTickFactory::str(const tsTick& tick)
{
    return tick.str() + strTail(&tick);
}


void tsTickPrice::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mPrice; bbST64LE(pBuf, u64); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickPrice::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mPrice = f64;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickPrice::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",price=%lg,opt=%u"), mPrice, mOpt);
    return std::string(str.GetPtr());
}


void tsTickVolume::serializeTail(char* pBuf) const
{
    bbST64LE(pBuf, mVolume); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickVolume::unserializeTail(const char* pBuf)
{
    mVolume = bbLD64LE(pBuf); pBuf+=8;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickVolume::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",volume=%"bbI64"u,opt=%u"), mVolume, mOpt);
    return std::string(str.GetPtr());
}


void tsTickPriceVolume::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mPrice; bbST64LE(pBuf, u64); pBuf+=8;
    bbST64LE(pBuf, mVolume); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickPriceVolume::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mPrice = f64;
    mVolume = bbLD64LE(pBuf); pBuf+=8;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickPriceVolume::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",price=%lg,volume=%"bbI64"u,opt=%u"), mPrice, mVolume, mOpt);
    return std::string(str.GetPtr());
}


void tsTickBid::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mPrice; bbST64LE(pBuf, u64); pBuf+=8;
    bbST64LE(pBuf, mVolume); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickBid::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mPrice = f64;
    mVolume = bbLD64LE(pBuf); pBuf+=8;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickBid::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",price=%lg,volume=%"bbI64"u,opt=%u"), mPrice, mVolume, mOpt);
    return std::string(str.GetPtr());
}


void tsTickAsk::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mPrice; bbST64LE(pBuf, u64); pBuf+=8;
    bbST64LE(pBuf, mVolume); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickAsk::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mPrice = f64;
    mVolume = bbLD64LE(pBuf); pBuf+=8;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickAsk::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",price=%lg,volume=%"bbI64"u,opt=%u"), mPrice, mVolume, mOpt);
    return std::string(str.GetPtr());
}


void tsTickBidAsk::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mPriceBid; bbST64LE(pBuf, u64); pBuf+=8;
    f64 = mPriceAsk; bbST64LE(pBuf, u64); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickBidAsk::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mPriceBid = f64;
    u64 = bbLD64LE(pBuf); pBuf+=8; mPriceAsk = f64;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickBidAsk::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",priceBid=%lg,priceAsk=%lg,opt=%u"), mPriceBid, mPriceAsk, mOpt);
    return std::string(str.GetPtr());
}


void tsTickRecap::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mOpen; bbST64LE(pBuf, u64); pBuf+=8;
    f64 = mHigh; bbST64LE(pBuf, u64); pBuf+=8;
    f64 = mLow; bbST64LE(pBuf, u64); pBuf+=8;
    f64 = mClose; bbST64LE(pBuf, u64); pBuf+=8;
    bbST64LE(pBuf, mVolume); pBuf+=8;
    bbST64LE(pBuf, mOpenInt); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickRecap::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mOpen = f64;
    u64 = bbLD64LE(pBuf); pBuf+=8; mHigh = f64;
    u64 = bbLD64LE(pBuf); pBuf+=8; mLow = f64;
    u64 = bbLD64LE(pBuf); pBuf+=8; mClose = f64;
    mVolume = bbLD64LE(pBuf); pBuf+=8;
    mOpenInt = bbLD64LE(pBuf); pBuf+=8;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickRecap::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",open=%lg,high=%lg,low=%lg,close=%lg,volume=%"bbI64"u,openInt=%"bbI64"u,opt=%u"), mOpen, mHigh, mLow, mClose, mVolume, mOpenInt, mOpt);
    return std::string(str.GetPtr());
}


void tsTickS32::serializeTail(char* pBuf) const
{
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickS32::unserializeTail(const char* pBuf)
{
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickS32::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",count=%d,opt=%u"), mCount, mOpt);
    return std::string(str.GetPtr());
}


void tsTickF64::serializeTail(char* pBuf) const
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    f64 = mValue; bbST64LE(pBuf, u64); pBuf+=8;
    bbST32LE(pBuf, mOpt); pBuf+=4;
}

void tsTickF64::unserializeTail(const char* pBuf)
{
    union { bbU32 u32; float f32; bbU64 u64; double f64; };

    u64 = bbLD64LE(pBuf); pBuf+=8; mValue = f64;
    mOpt = bbLD32LE(pBuf); pBuf+=4;
}

std::string tsTickF64::strTail() const
{
    bbStrBuf str;
    str.Printf(bbT(",value=%lg,opt=%u"), mValue, mOpt);
    return std::string(str.GetPtr());
}


